// Generated by gencpp from file robotnik_elevator_interface_msgs/GoToFloorRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_ELEVATOR_INTERFACE_MSGS_MESSAGE_GOTOFLOORREQUEST_H
#define ROBOTNIK_ELEVATOR_INTERFACE_MSGS_MESSAGE_GOTOFLOORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_elevator_interface_msgs
{
template <class ContainerAllocator>
struct GoToFloorRequest_
{
  typedef GoToFloorRequest_<ContainerAllocator> Type;

  GoToFloorRequest_()
    : floor(0)
    , control_token()  {
    }
  GoToFloorRequest_(const ContainerAllocator& _alloc)
    : floor(0)
    , control_token(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _floor_type;
  _floor_type floor;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _control_token_type;
  _control_token_type control_token;





  typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoToFloorRequest_

typedef ::robotnik_elevator_interface_msgs::GoToFloorRequest_<std::allocator<void> > GoToFloorRequest;

typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::GoToFloorRequest > GoToFloorRequestPtr;
typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::GoToFloorRequest const> GoToFloorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator1> & lhs, const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.floor == rhs.floor &&
    lhs.control_token == rhs.control_token;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator1> & lhs, const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_elevator_interface_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb7620e69dacb5ea06f5b85abb818c5a";
  }

  static const char* value(const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb7620e69dacb5eaULL;
  static const uint64_t static_value2 = 0x06f5b85abb818c5aULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_elevator_interface_msgs/GoToFloorRequest";
  }

  static const char* value(const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 floor\n"
"# unique control token to avoid controlling the elevator from external agents\n"
"string control_token\n"
;
  }

  static const char* value(const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.floor);
      stream.next(m.control_token);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToFloorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_elevator_interface_msgs::GoToFloorRequest_<ContainerAllocator>& v)
  {
    s << indent << "floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.floor);
    s << indent << "control_token: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.control_token);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_ELEVATOR_INTERFACE_MSGS_MESSAGE_GOTOFLOORREQUEST_H
