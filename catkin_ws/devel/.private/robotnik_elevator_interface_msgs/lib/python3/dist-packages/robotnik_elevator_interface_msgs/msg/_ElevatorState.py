# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_elevator_interface_msgs/ElevatorState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ElevatorState(genpy.Message):
  _md5sum = "3531700245f9c96dbc860f08577c591f"
  _type = "robotnik_elevator_interface_msgs/ElevatorState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string ELEVATOR_STATUS_IDLE=idle
string ELEVATOR_STATUS_UNKNOWN=unknown
string ELEVATOR_STATUS_MOVING=moving

string DOOR_STATUS_UNKNOWN=unknown
string DOOR_STATUS_OPENING=opening
string DOOR_STATUS_CLOSING=closing
string DOOR_STATUS_CLOSE=close
string DOOR_STATUS_OPEN=open

string elevator_id

int32 current_floor
int32 target_floor
# True if the elevator is under control
bool under_control
# id to identify who is controlling the elevator
string master_id
# elevator status
string elevator_status
# door status
string door_status
# flag active when no one is in the cabin
bool cabin_presence_free
"""
  # Pseudo-constants
  ELEVATOR_STATUS_IDLE = 'idle'
  ELEVATOR_STATUS_UNKNOWN = 'unknown'
  ELEVATOR_STATUS_MOVING = 'moving'
  DOOR_STATUS_UNKNOWN = 'unknown'
  DOOR_STATUS_OPENING = 'opening'
  DOOR_STATUS_CLOSING = 'closing'
  DOOR_STATUS_CLOSE = 'close'
  DOOR_STATUS_OPEN = 'open'

  __slots__ = ['elevator_id','current_floor','target_floor','under_control','master_id','elevator_status','door_status','cabin_presence_free']
  _slot_types = ['string','int32','int32','bool','string','string','string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       elevator_id,current_floor,target_floor,under_control,master_id,elevator_status,door_status,cabin_presence_free

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ElevatorState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.elevator_id is None:
        self.elevator_id = ''
      if self.current_floor is None:
        self.current_floor = 0
      if self.target_floor is None:
        self.target_floor = 0
      if self.under_control is None:
        self.under_control = False
      if self.master_id is None:
        self.master_id = ''
      if self.elevator_status is None:
        self.elevator_status = ''
      if self.door_status is None:
        self.door_status = ''
      if self.cabin_presence_free is None:
        self.cabin_presence_free = False
    else:
      self.elevator_id = ''
      self.current_floor = 0
      self.target_floor = 0
      self.under_control = False
      self.master_id = ''
      self.elevator_status = ''
      self.door_status = ''
      self.cabin_presence_free = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.elevator_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iB().pack(_x.current_floor, _x.target_floor, _x.under_control))
      _x = self.master_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.elevator_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.door_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cabin_presence_free
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.elevator_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.elevator_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.current_floor, _x.target_floor, _x.under_control,) = _get_struct_2iB().unpack(str[start:end])
      self.under_control = bool(self.under_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.master_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.elevator_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.elevator_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.door_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.door_status = str[start:end]
      start = end
      end += 1
      (self.cabin_presence_free,) = _get_struct_B().unpack(str[start:end])
      self.cabin_presence_free = bool(self.cabin_presence_free)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.elevator_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iB().pack(_x.current_floor, _x.target_floor, _x.under_control))
      _x = self.master_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.elevator_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.door_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cabin_presence_free
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.elevator_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.elevator_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.current_floor, _x.target_floor, _x.under_control,) = _get_struct_2iB().unpack(str[start:end])
      self.under_control = bool(self.under_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.master_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.elevator_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.elevator_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.door_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.door_status = str[start:end]
      start = end
      end += 1
      (self.cabin_presence_free,) = _get_struct_B().unpack(str[start:end])
      self.cabin_presence_free = bool(self.cabin_presence_free)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iB = None
def _get_struct_2iB():
    global _struct_2iB
    if _struct_2iB is None:
        _struct_2iB = struct.Struct("<2iB")
    return _struct_2iB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
