// Generated by gencpp from file robotnik_msgs/RecordRequest.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_RECORDREQUEST_H
#define ROBOTNIK_MSGS_MESSAGE_RECORDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct RecordRequest_
{
  typedef RecordRequest_<ContainerAllocator> Type;

  RecordRequest_()
    : action()
    , file_name()
    , max_time(0)  {
    }
  RecordRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , file_name(_alloc)
    , max_time(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _file_name_type;
  _file_name_type file_name;

   typedef int32_t _max_time_type;
  _max_time_type max_time;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_RECORD)
  #undef ACTION_RECORD
#endif
#if defined(_WIN32) && defined(ACTION_STOP)
  #undef ACTION_STOP
#endif
#if defined(_WIN32) && defined(ACTION_SAVE)
  #undef ACTION_SAVE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ACTION_RECORD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ACTION_STOP;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ACTION_SAVE;

  typedef boost::shared_ptr< ::robotnik_msgs::RecordRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::RecordRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RecordRequest_

typedef ::robotnik_msgs::RecordRequest_<std::allocator<void> > RecordRequest;

typedef boost::shared_ptr< ::robotnik_msgs::RecordRequest > RecordRequestPtr;
typedef boost::shared_ptr< ::robotnik_msgs::RecordRequest const> RecordRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      RecordRequest_<ContainerAllocator>::ACTION_RECORD =
        
          "RECORD"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      RecordRequest_<ContainerAllocator>::ACTION_STOP =
        
          "STOP"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      RecordRequest_<ContainerAllocator>::ACTION_SAVE =
        
          "SAVE"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::RecordRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::RecordRequest_<ContainerAllocator1> & lhs, const ::robotnik_msgs::RecordRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.file_name == rhs.file_name &&
    lhs.max_time == rhs.max_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::RecordRequest_<ContainerAllocator1> & lhs, const ::robotnik_msgs::RecordRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::RecordRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::RecordRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::RecordRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbfe3d7a69656c931298b4f3f1693d9b";
  }

  static const char* value(const ::robotnik_msgs::RecordRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbfe3d7a69656c93ULL;
  static const uint64_t static_value2 = 0x1298b4f3f1693d9bULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/RecordRequest";
  }

  static const char* value(const ::robotnik_msgs::RecordRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ACTION_RECORD=RECORD\n"
"string ACTION_STOP=STOP\n"
"string ACTION_SAVE=SAVE\n"
"string action\n"
"string file_name\n"
"int32 max_time\n"
;
  }

  static const char* value(const ::robotnik_msgs::RecordRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.file_name);
      stream.next(m.max_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecordRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::RecordRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::RecordRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.file_name);
    s << indent << "max_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_RECORDREQUEST_H
