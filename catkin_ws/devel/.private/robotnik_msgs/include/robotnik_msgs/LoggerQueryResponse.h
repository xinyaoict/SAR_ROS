// Generated by gencpp from file robotnik_msgs/LoggerQueryResponse.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_LOGGERQUERYRESPONSE_H
#define ROBOTNIK_MSGS_MESSAGE_LOGGERQUERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotnik_msgs/Logger.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct LoggerQueryResponse_
{
  typedef LoggerQueryResponse_<ContainerAllocator> Type;

  LoggerQueryResponse_()
    : result()
    , success(false)
    , message()  {
    }
  LoggerQueryResponse_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robotnik_msgs::Logger_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robotnik_msgs::Logger_<ContainerAllocator> >> _result_type;
  _result_type result;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LoggerQueryResponse_

typedef ::robotnik_msgs::LoggerQueryResponse_<std::allocator<void> > LoggerQueryResponse;

typedef boost::shared_ptr< ::robotnik_msgs::LoggerQueryResponse > LoggerQueryResponsePtr;
typedef boost::shared_ptr< ::robotnik_msgs::LoggerQueryResponse const> LoggerQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator1> & lhs, const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator1> & lhs, const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2194465d56c21a92c0e88bd03eb8d0d8";
  }

  static const char* value(const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2194465d56c21a92ULL;
  static const uint64_t static_value2 = 0xc0e88bd03eb8d0d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/LoggerQueryResponse";
  }

  static const char* value(const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Logger[] result\n"
"bool success\n"
"string message\n"
"\n"
"================================================================================\n"
"MSG: robotnik_msgs/Logger\n"
"string LOG_LEVEL_INFO=INFO\n"
"string LOG_LEVEL_WARNING=WARNING\n"
"string LOG_LEVEL_ERROR=ERROR\n"
"string LOG_LEVEL_DEBUG=DEBUG\n"
"string LOG_LEVEL_USER=USER\n"
"string robot_id\n"
"string date_time\n"
"string component\n"
"string tag\n"
"string log_level\n"
"string description\n"
;
  }

  static const char* value(const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoggerQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::LoggerQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "result[]" << std::endl;
    for (size_t i = 0; i < v.result.size(); ++i)
    {
      s << indent << "  result[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotnik_msgs::Logger_<ContainerAllocator> >::stream(s, indent + "    ", v.result[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_LOGGERQUERYRESPONSE_H
