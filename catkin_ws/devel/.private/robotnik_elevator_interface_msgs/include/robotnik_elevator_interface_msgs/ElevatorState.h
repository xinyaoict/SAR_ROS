// Generated by gencpp from file robotnik_elevator_interface_msgs/ElevatorState.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_ELEVATOR_INTERFACE_MSGS_MESSAGE_ELEVATORSTATE_H
#define ROBOTNIK_ELEVATOR_INTERFACE_MSGS_MESSAGE_ELEVATORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_elevator_interface_msgs
{
template <class ContainerAllocator>
struct ElevatorState_
{
  typedef ElevatorState_<ContainerAllocator> Type;

  ElevatorState_()
    : elevator_id()
    , current_floor(0)
    , target_floor(0)
    , under_control(false)
    , master_id()
    , elevator_status()
    , door_status()
    , cabin_presence_free(false)  {
    }
  ElevatorState_(const ContainerAllocator& _alloc)
    : elevator_id(_alloc)
    , current_floor(0)
    , target_floor(0)
    , under_control(false)
    , master_id(_alloc)
    , elevator_status(_alloc)
    , door_status(_alloc)
    , cabin_presence_free(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _elevator_id_type;
  _elevator_id_type elevator_id;

   typedef int32_t _current_floor_type;
  _current_floor_type current_floor;

   typedef int32_t _target_floor_type;
  _target_floor_type target_floor;

   typedef uint8_t _under_control_type;
  _under_control_type under_control;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _master_id_type;
  _master_id_type master_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _elevator_status_type;
  _elevator_status_type elevator_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _door_status_type;
  _door_status_type door_status;

   typedef uint8_t _cabin_presence_free_type;
  _cabin_presence_free_type cabin_presence_free;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ELEVATOR_STATUS_IDLE)
  #undef ELEVATOR_STATUS_IDLE
#endif
#if defined(_WIN32) && defined(ELEVATOR_STATUS_UNKNOWN)
  #undef ELEVATOR_STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(ELEVATOR_STATUS_MOVING)
  #undef ELEVATOR_STATUS_MOVING
#endif
#if defined(_WIN32) && defined(DOOR_STATUS_UNKNOWN)
  #undef DOOR_STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(DOOR_STATUS_OPENING)
  #undef DOOR_STATUS_OPENING
#endif
#if defined(_WIN32) && defined(DOOR_STATUS_CLOSING)
  #undef DOOR_STATUS_CLOSING
#endif
#if defined(_WIN32) && defined(DOOR_STATUS_CLOSE)
  #undef DOOR_STATUS_CLOSE
#endif
#if defined(_WIN32) && defined(DOOR_STATUS_OPEN)
  #undef DOOR_STATUS_OPEN
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ELEVATOR_STATUS_IDLE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ELEVATOR_STATUS_UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ELEVATOR_STATUS_MOVING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DOOR_STATUS_UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DOOR_STATUS_OPENING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DOOR_STATUS_CLOSING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DOOR_STATUS_CLOSE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DOOR_STATUS_OPEN;

  typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> const> ConstPtr;

}; // struct ElevatorState_

typedef ::robotnik_elevator_interface_msgs::ElevatorState_<std::allocator<void> > ElevatorState;

typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::ElevatorState > ElevatorStatePtr;
typedef boost::shared_ptr< ::robotnik_elevator_interface_msgs::ElevatorState const> ElevatorStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::ELEVATOR_STATUS_IDLE =
        
          "idle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::ELEVATOR_STATUS_UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::ELEVATOR_STATUS_MOVING =
        
          "moving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::DOOR_STATUS_UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::DOOR_STATUS_OPENING =
        
          "opening"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::DOOR_STATUS_CLOSING =
        
          "closing"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::DOOR_STATUS_CLOSE =
        
          "close"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ElevatorState_<ContainerAllocator>::DOOR_STATUS_OPEN =
        
          "open"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator1> & lhs, const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator2> & rhs)
{
  return lhs.elevator_id == rhs.elevator_id &&
    lhs.current_floor == rhs.current_floor &&
    lhs.target_floor == rhs.target_floor &&
    lhs.under_control == rhs.under_control &&
    lhs.master_id == rhs.master_id &&
    lhs.elevator_status == rhs.elevator_status &&
    lhs.door_status == rhs.door_status &&
    lhs.cabin_presence_free == rhs.cabin_presence_free;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator1> & lhs, const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_elevator_interface_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3531700245f9c96dbc860f08577c591f";
  }

  static const char* value(const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3531700245f9c96dULL;
  static const uint64_t static_value2 = 0xbc860f08577c591fULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_elevator_interface_msgs/ElevatorState";
  }

  static const char* value(const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ELEVATOR_STATUS_IDLE=idle\n"
"string ELEVATOR_STATUS_UNKNOWN=unknown\n"
"string ELEVATOR_STATUS_MOVING=moving\n"
"\n"
"string DOOR_STATUS_UNKNOWN=unknown\n"
"string DOOR_STATUS_OPENING=opening\n"
"string DOOR_STATUS_CLOSING=closing\n"
"string DOOR_STATUS_CLOSE=close\n"
"string DOOR_STATUS_OPEN=open\n"
"\n"
"string elevator_id\n"
"\n"
"int32 current_floor\n"
"int32 target_floor\n"
"# True if the elevator is under control\n"
"bool under_control\n"
"# id to identify who is controlling the elevator\n"
"string master_id\n"
"# elevator status\n"
"string elevator_status\n"
"# door status\n"
"string door_status\n"
"# flag active when no one is in the cabin\n"
"bool cabin_presence_free\n"
;
  }

  static const char* value(const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.elevator_id);
      stream.next(m.current_floor);
      stream.next(m.target_floor);
      stream.next(m.under_control);
      stream.next(m.master_id);
      stream.next(m.elevator_status);
      stream.next(m.door_status);
      stream.next(m.cabin_presence_free);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevatorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_elevator_interface_msgs::ElevatorState_<ContainerAllocator>& v)
  {
    s << indent << "elevator_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.elevator_id);
    s << indent << "current_floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_floor);
    s << indent << "target_floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_floor);
    s << indent << "under_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.under_control);
    s << indent << "master_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.master_id);
    s << indent << "elevator_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.elevator_status);
    s << indent << "door_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.door_status);
    s << indent << "cabin_presence_free: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cabin_presence_free);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_ELEVATOR_INTERFACE_MSGS_MESSAGE_ELEVATORSTATE_H
